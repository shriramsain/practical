Hereâ€™s the updated, detailed version of your answers with theoretical explanations:


---

1. List of Data Types in R

In R, data types define the nature of values stored in variables. These are fundamental to understanding how data is managed and manipulated in R. The main data types include:

1. Numeric: Represents real numbers. By default, numbers in R are stored as numeric (double-precision floating-point). E.g., 3.14, -42.7.


2. Integer: Represents whole numbers. Integers must be explicitly defined using an L suffix. E.g., 5L.


3. Complex: Represents numbers with both real and imaginary parts. E.g., 3 + 2i.


4. Logical: Represents boolean values, typically used in conditional operations. E.g., TRUE, FALSE.


5. Character: Represents text strings or characters. E.g., "Hello".


6. Raw: Represents raw bytes, which are rarely used in everyday programming.



Example:

x <- 42.5      # Numeric
y <- 5L        # Integer
z <- 1 + 2i    # Complex
a <- TRUE      # Logical
b <- "R"       # Character


---

2. What is a Package in R?

A package in R is a collection of pre-written functions, datasets, and documentation that extends the capabilities of R. Packages simplify coding by providing ready-to-use tools for tasks like data visualization, statistical modeling, or machine learning.

Installing a Package:
To use additional functionality, packages must first be installed using install.packages(). For instance:

install.packages("ggplot2")  # Installs ggplot2

Loading a Package:
After installation, you can load the package using the library() function:

library(ggplot2)


Packages are available on repositories like CRAN, Bioconductor, or GitHub.


---

3. Explain Data Frame

A data frame is one of the most commonly used data structures in R, especially for handling datasets. It is a two-dimensional structure (like a table) where:

Each column can contain different types of data (numeric, character, etc.).

Each row represents an observation.


Advantages:

Facilitates analysis by organizing data in a tabular form.

Functions like summary() can easily compute statistics on data frames.


Creating a Data Frame:

df <- data.frame(
  Name = c("Alice", "Bob"),
  Age = c(25, 30),
  Score = c(85, 92)
)
print(df)

Output:

Name Age Score
1 Alice  25    85
2   Bob  30    92


---

4. R Multiple Variables

R allows simultaneous assignment of values to multiple variables, reducing redundancy in code. This is useful for initializing variables or assigning interdependent values.

Example:

a <- 10; b <- 20; c <- a + b
print(c)  # Output: 30

This approach is compact and readable.


---

5. Types of Loops in R

Loops are used to execute a block of code repeatedly. R provides three main types of loops:

a. For Loop:

Iterates over a sequence of values, such as vectors or lists.

Syntax:

for (variable in sequence) {
  # Code to execute
}

Example:

for (i in 1:5) {
  print(i)
}

b. While Loop:

Executes as long as the condition is TRUE.

Syntax:

while (condition) {
  # Code to execute
}

Example:

x <- 1
while (x <= 5) {
  print(x)
  x <- x + 1
}

c. Repeat Loop:

Executes indefinitely unless explicitly broken with break.

Syntax:

repeat {
  # Code
  if (condition) break
}

Example:

x <- 1
repeat {
  print(x)
  x <- x + 1
  if (x > 5) break
}


---

6. Data Type Conversion in R

In R, data types can be converted using explicit conversion functions. This is particularly useful when importing data from external sources where the types may not match your needs.

Common Conversion Functions:

as.numeric(): Converts to numeric.

as.integer(): Converts to integer.

as.complex(): Converts to complex.

as.character(): Converts to character.


Example:

x <- "42"
num <- as.numeric(x)  # Converts "42" to 42
int <- as.integer(x)  # Converts "42" to 42L
comp <- as.complex(x) # Converts "42" to 42+0i


---

7. Explain Vector and List

a. Vector:

A vector is the simplest data structure in R. It is a sequence of data elements of the same type (e.g., numeric, character).

Example:

vec <- c(1, 2, 3, 4)  # Numeric vector
print(vec)

b. List:

A list is a collection of elements that can have different data types. It is more flexible than vectors.

Example:

lst <- list("Alice", 25, TRUE)
print(lst)


---

8. Explain Data Frame

(Refer to Question 3 for details.)


---

9. Draw Two Points

Code:

plot(1, 3, xlim = c(0, 10), ylim = c(0, 10), col = "red", pch = 16, main = "Two Points")
points(8, 10, col = "blue", pch = 16)


---

10. Display and Connect Multiple Points

Code:

x <- c(1, 3, 5, 7)
y <- c(2, 4, 6, 8)
plot(x, y, type = "o", col = "blue", main = "Connected Points")


---

11. Display a Scatter Plot

Code:

x <- rnorm(50)
y <- rnorm(50)
plot(x, y, main = "Scatter Plot", col = "darkgreen", pch = 16)


---

12. R Statistics

R provides built-in functions for basic statistics:

Mean: Average of values.


mean(c(1, 2, 3, 4, 5))  # Output: 3

Median: Middle value in sorted data.


median(c(1, 2, 3, 4, 5))  # Output: 3

Mode: Most frequent value.


Mode <- function(x) {
  unique_val <- unique(x)
  unique_val[which.max(tabulate(match(x, unique_val)))]
}
Mode(c(1, 2, 2, 3))


---

13. Dataset and Summary

A dataset is a structured collection of data. In R, summary() provides a quick overview:

data <- data.frame(Age = c(25, 30), Score = c(80, 90))
summary(data)


---

14. Commands

Sort:


sort(c(4, 1, 3, 2))

Merge:


merge(df1, df2, by = "ID")

Dimensions:


dim(data)


---

15. Workspace Commands

List Variables:


ls()

Remove Variables:


rm(var_name)


---

16. String Operations

Number of Characters:


nchar("Hello World")  # Output: 11

Check Substring:


grepl("World", "Hello World")  # Output: TRUE
